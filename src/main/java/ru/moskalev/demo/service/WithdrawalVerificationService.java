package ru.moskalev.demo.service;

import org.springframework.stereotype.Service;
import ru.moskalev.demo.domain.BankAccount;
import ru.moskalev.demo.repository.BankAccountRepository;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

@Service
public class WithdrawalVerificationService {
    private final BankAccountRepository repository;

    private final ReentrantLock lock = new ReentrantLock();

    // Condition: –∫–ª–∏–µ–Ω—Ç—ã –∂–¥—É—Ç, –ø–æ–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ–¥–æ–±—Ä–∏—Ç —Å–Ω—è—Ç–∏–µ
    private final Condition withdrawalApproved = lock.newCondition();

    // Condition (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –º–µ–Ω–µ–¥–∂–µ—Ä –∂–¥—ë—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤—è—Ç—Å—è –∑–∞—è–≤–∫–∏
    private final Condition newRequestsArrived = lock.newCondition();

    // –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–Ω—è—Ç–∏–π (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç WithdrawalRequest)
    private final Queue<WithdrawalRequest> pendingRequests = new ConcurrentLinkedQueue<>();

    public WithdrawalVerificationService(BankAccountRepository repository) {
        this.repository = repository;
    }


    // –ö–õ–ò–ï–ù–¢: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–Ω—è—Ç–∏–µ –∫—Ä—É–ø–Ω–æ–π —Å—É–º–º—ã ===
    public void requestLargeWithdrawal(String accountNum, double amount) throws InterruptedException {
        if (amount <= 1000) {
            // –ú–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            executeWithdrawal(accountNum, amount);
            return;
        }

        WithdrawalRequest request = new WithdrawalRequest(accountNum, amount);

        lock.lock();
        try {
            System.out.println("–ö–ª–∏–µ–Ω—Ç " + accountNum + " –∑–∞–ø—Ä–æ—Å–∏–ª —Å–Ω—è—Ç–∏–µ " + amount + ". –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...");

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
            pendingRequests.add(request);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π Condition)
            newRequestsArrived.signal(); // ‚Üê –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä "—Å–ø–∏—Ç", –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫

            // –ñ–¥—ë–º, –ø–æ–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ–¥–æ–±—Ä–∏—Ç
            withdrawalApproved.await(); // ‚Üê –≤–æ—Ç –≥–¥–µ Condition —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!

            // –ï—Å–ª–∏ –¥–æ–∂–¥–∞–ª–∏—Å—å ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–Ω—è—Ç–∏–µ
            System.out.println("‚úÖ –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ " + accountNum + " –æ–¥–æ–±—Ä–µ–Ω. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–Ω—è—Ç–∏–µ...");
            executeWithdrawal(accountNum, amount);
        } finally {
            lock.unlock();
        }
    }

    // === –ú–ï–ù–ï–î–ñ–ï–†: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É ===
    public void approveNextWithdrawal() throws InterruptedException {
        lock.lock();
        try {
            WithdrawalRequest next = pendingRequests.poll();
            if (next != null) {
                System.out.println(Thread.currentThread().getName() + ":üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫—É...");
                Thread.sleep(500);
                System.out.println(Thread.currentThread().getName() + ":üë®‚Äçüíº  –æ–¥–æ–±—Ä–∏–ª —Å–Ω—è—Ç–∏–µ " + next.amount + " —Å–æ —Å—á—ë—Ç–∞ " + next.accountNum);
                withdrawalApproved.signal(); // ‚Üê –±—É–¥–∏–º –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!
            } else {
                System.out.println("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–Ω—è—Ç–∏–µ.");
            }
        } finally {
            lock.unlock();
        }
    }

    // === (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ú–ï–ù–ï–î–ñ–ï–†: –∂–¥—ë—Ç, –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–∞—è–≤–∫–∏ ===
    public void waitForRequests() throws InterruptedException {
        lock.lock();
        try {
            while (pendingRequests.isEmpty()) {
                System.out.println(Thread.currentThread().getName() + ": üë®‚Äçüíº –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫...");
                newRequestsArrived.await(); // ‚Üê –∂–¥—ë—Ç, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –¥–æ–±–∞–≤—è—Ç –∑–∞—è–≤–∫–∏
            }
            System.out.println(" –ü–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–Ω—è—Ç–∏–µ!");
        } finally {
            lock.unlock();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–Ω—è—Ç–∏–µ (—É–∂–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    private void executeWithdrawal(String accountNum, double amount) {
        BankAccount account = repository.getAccount(accountNum);
        if (account.getBalance() < amount) {
            throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ " + accountNum);
        }
        account.setBalance(account.getBalance() - amount);
        repository.save(account);
        System.out.println(" –°–Ω—è—Ç–æ " + amount + " —Å–æ —Å—á—ë—Ç–∞ " + accountNum + ". –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + account.getBalance());
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞—è–≤–∫–∏
    private static class WithdrawalRequest {
        String accountNum;
        double amount;

        WithdrawalRequest(String accountNum, double amount) {
            this.accountNum = accountNum;
            this.amount = amount;
        }
    }
}

package ru.moskalev.demo.service;

import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import ru.moskalev.demo.domain.BankAccount;
import ru.moskalev.demo.repository.BankAccountRepository;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.locks.Lock;

import static ru.moskalev.demo.utils.TaskSimulateWork.simulateCpuWork;

@Service
public class BankAccountService {

    @Autowired
    private BankAccountRepository repository;

    Object monitor = new Object();

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞
    public List<BankAccount> getAllAccounts() {
        return repository.findAll();
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç –ø–æ –Ω–æ–º–µ—Ä—É
    public BankAccount getAccount(String accountNumber) {
        Optional<BankAccount> account = repository.findById(accountNumber);
        return account.orElseThrow(() ->
                new RuntimeException("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + accountNumber));
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç
    public BankAccount saveAccount(BankAccount account) {
        return repository.save(account);
    }


    //–ü–æ—Ç–æ–∫ 1: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å A –Ω–∞ B
//–ü–æ—Ç–æ–∫ 2: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å B –Ω–∞ A
    public void transferForStream(String from, String to, double amount) {
        // üëá –ö–õ–Æ–ß–ï–í–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ —Å—á–µ—Ç–∞
        //–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å deadlock, –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ.
        //
        String first = from.compareTo(to) < 0 ? from : to;
        String second = from.compareTo(to) < 0 ? to : from;

        synchronized (first.intern()) { //–∫–ª–∞–¥–µ–º –≤ –ø—É–ª–ª —Å—Ç—Ä–æ–∫
            synchronized (second.intern()) {
                BankAccount fromAcc = getAccount(from);
                BankAccount toAcc = getAccount(to);

                if (fromAcc.getBalance() < amount) {
                    throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: " + from);
                }

                fromAcc.setBalance(fromAcc.getBalance() - amount);
                toAcc.setBalance(toAcc.getBalance() + amount);

                repository.save(fromAcc);
                repository.save(toAcc);

                System.out.println(Thread.currentThread().getName() + ": –ü–µ—Ä–µ–≤–æ–¥ " + amount + " —Å " + from + " –Ω–∞ " + to + " –≤—ã–ø–æ–ª–Ω–µ–Ω.");
            }
        }
    }

    public void transferForStreamBlockOneMonitor(String from, String to, double amount) {
        synchronized (monitor) {


            BankAccount fromAcc = getAccount(from);
            BankAccount toAcc = getAccount(to);

            if (fromAcc.getBalance() < amount) {
                throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: " + from);
            }

            fromAcc.setBalance(fromAcc.getBalance() - amount);
            toAcc.setBalance(toAcc.getBalance() + amount);

            repository.save(fromAcc);
            repository.save(toAcc);

            System.out.println(Thread.currentThread().getName() + ": –ü–µ—Ä–µ–≤–æ–¥ " + amount + " —Å " + from + " –Ω–∞ " + to + " –≤—ã–ø–æ–ª–Ω–µ–Ω.");
        }
    }


    // –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏ (–≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!)
    @Transactional
    public void transfer(String fromNum, String toNum, double amount) {
        BankAccount fromAcc = getAccount(fromNum);
        BankAccount toAcc = getAccount(toNum);

        if (fromAcc.getBalance() < amount) {
            throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: " + fromNum);
        }

        fromAcc.setBalance(fromAcc.getBalance() - amount);
        toAcc.setBalance(toAcc.getBalance() + amount);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π)
        repository.save(fromAcc);
        repository.save(toAcc);

        System.out.println("–ü–µ—Ä–µ–≤–æ–¥ " + amount + " —Å–æ —Å—á—ë—Ç–∞ " + fromNum +
                " –Ω–∞ —Å—á—ë—Ç " + toNum + " –≤—ã–ø–æ–ª–Ω–µ–Ω.");
    }


    @Transactional
    public void transferWithWait(String fromNum, String toNum, Object monitor, double amount, boolean shouldWait) {

        synchronized (monitor) {
            BankAccount fromAcc = getAccount(fromNum);
            BankAccount toAcc = getAccount(toNum);

            if (fromAcc.getBalance() < amount) {
                throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: " + fromNum);
            }

            if (shouldWait) {
                System.out.println(Thread.currentThread().getName() + ": –∑–∞—Ö–≤–∞—Ç–∏–ª –º–æ–Ω–∏—Ç–æ—Ä, —Ç–µ–ø–µ—Ä—å –∂–¥—É —á–µ—Ä–µ–∑ wait()...");
                try {
                    monitor.wait();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞", e);
                }
                System.out.println(Thread.currentThread().getName() + ": –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ—Å–ª–µ notify!");
            } else {
                System.out.println(Thread.currentThread().getName() + ": –∑–∞—Ö–≤–∞—Ç–∏–ª –º–æ–Ω–∏—Ç–æ—Ä, –≤—ã–∑—ã–≤–∞—é notify() –∏ —É—Ö–æ–∂—É...");
                monitor.notify(); // –ü—Ä–æ–±—É–∂–¥–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ—Ç–æ–∫
            }

            simulateCpuWork(Thread.currentThread().getName(), 5000);
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            fromAcc.setBalance(fromAcc.getBalance() - amount);
            toAcc.setBalance(toAcc.getBalance() + amount);

            repository.save(fromAcc);
            repository.save(toAcc);

            System.out.println(Thread.currentThread().getName() + ": –ø–µ—Ä–µ–≤–æ–¥ " + amount + " —Å " + fromNum + " –Ω–∞ " + toNum + " –≤—ã–ø–æ–ª–Ω–µ–Ω.");
        }
    }


    public void transferWithBlock(String fromNum, String toNum, Object monitor, double amount) {
        System.out.println(Thread.currentThread().getName() + ": –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä...");

        synchronized (monitor) {
            System.out.println(Thread.currentThread().getName() + ":  –∑–∞—Ö–≤–∞—Ç–∏–ª –º–æ–Ω–∏—Ç–æ—Ä...");

            BankAccount fromAcc = getAccount(fromNum);
            BankAccount toAcc = getAccount(toNum);

            if (fromAcc.getBalance() < amount) {
                throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: " + fromNum);
            }


            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            fromAcc.setBalance(fromAcc.getBalance() - amount);
            toAcc.setBalance(toAcc.getBalance() + amount);

            repository.save(fromAcc);
            repository.save(toAcc);

            System.out.println(Thread.currentThread().getName() + ": –ø–µ—Ä–µ–≤–æ–¥ " + amount + " —Å " + fromNum + " –Ω–∞ " + toNum + " –≤—ã–ø–æ–ª–Ω–µ–Ω.");
        }
    }

    public void transferWithPark(String fromNum, String toNum, Lock lock, double amount) {
        System.out.println(Thread.currentThread().getName() + ": –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä...");

        lock.lock();
        try {
            System.out.println(Thread.currentThread().getName() + ":  –∑–∞—Ö–≤–∞—Ç–∏–ª –º–æ–Ω–∏—Ç–æ—Ä...");

            BankAccount fromAcc = getAccount(fromNum);
            BankAccount toAcc = getAccount(toNum);

            if (fromAcc.getBalance() < amount) {
                throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: " + fromNum);
            }


            simulateCpuWork(Thread.currentThread().getName(), 20000);
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            fromAcc.setBalance(fromAcc.getBalance() - amount);
            toAcc.setBalance(toAcc.getBalance() + amount);

            repository.save(fromAcc);
            repository.save(toAcc);

            System.out.println(Thread.currentThread().getName() + ": –ø–µ—Ä–µ–≤–æ–¥ " + amount + " —Å " + fromNum + " –Ω–∞ " + toNum + " –≤—ã–ø–æ–ª–Ω–µ–Ω.");
        } finally {
            lock.unlock();
        }

    }
}
